<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.revengemission.commons.fss.persistence.mapper.FileRecordEntityMapper">
  <resultMap id="BaseResultMap" type="com.revengemission.commons.fss.persistence.entity.FileRecordEntity">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="shared" jdbcType="BIT" property="shared" />
    <result column="file_name" jdbcType="VARCHAR" property="fileName" />
    <result column="record_status" jdbcType="INTEGER" property="recordStatus" />
    <result column="remarks" jdbcType="VARCHAR" property="remarks" />
    <result column="version" jdbcType="INTEGER" property="version" />
    <result column="date_created" jdbcType="TIMESTAMP" property="dateCreated" />
    <result column="last_modified" jdbcType="TIMESTAMP" property="lastModified" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, shared, file_name, record_status, remarks, version, date_created, last_modified
  </sql>
  <select id="selectByExample" parameterType="com.revengemission.commons.fss.persistence.entity.FileRecordEntityExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from file_record_entity
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from file_record_entity
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from file_record_entity
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.revengemission.commons.fss.persistence.entity.FileRecordEntityExample">
    delete from file_record_entity
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.revengemission.commons.fss.persistence.entity.FileRecordEntity">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into file_record_entity (user_id, shared, file_name, 
      record_status, remarks, version, 
      date_created, last_modified)
    values (#{userId,jdbcType=BIGINT}, #{shared,jdbcType=BIT}, #{fileName,jdbcType=VARCHAR}, 
      #{recordStatus,jdbcType=INTEGER}, #{remarks,jdbcType=VARCHAR}, #{version,jdbcType=INTEGER}, 
      #{dateCreated,jdbcType=TIMESTAMP}, #{lastModified,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.revengemission.commons.fss.persistence.entity.FileRecordEntity">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into file_record_entity
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      shared,
      <if test="fileName != null">
        file_name,
      </if>
      record_status,
      <if test="remarks != null">
        remarks,
      </if>
      version,
      <if test="dateCreated != null">
        date_created,
      </if>
      <if test="lastModified != null">
        last_modified,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      #{shared,jdbcType=BIT},
      <if test="fileName != null">
        #{fileName,jdbcType=VARCHAR},
      </if>
      #{recordStatus,jdbcType=INTEGER},
      <if test="remarks != null">
        #{remarks,jdbcType=VARCHAR},
      </if>
      #{version,jdbcType=INTEGER},
      <if test="dateCreated != null">
        #{dateCreated,jdbcType=TIMESTAMP},
      </if>
      <if test="lastModified != null">
        #{lastModified,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.revengemission.commons.fss.persistence.entity.FileRecordEntityExample" resultType="java.lang.Long">
    select count(*) from file_record_entity
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update file_record_entity
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.shared != null">
        shared = #{record.shared,jdbcType=BIT},
      </if>
      <if test="record.fileName != null">
        file_name = #{record.fileName,jdbcType=VARCHAR},
      </if>
      <if test="record.recordStatus != null">
        record_status = #{record.recordStatus,jdbcType=INTEGER},
      </if>
      <if test="record.remarks != null">
        remarks = #{record.remarks,jdbcType=VARCHAR},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=INTEGER},
      </if>
      <if test="record.dateCreated != null">
        date_created = #{record.dateCreated,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastModified != null">
        last_modified = #{record.lastModified,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update file_record_entity
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      shared = #{record.shared,jdbcType=BIT},
      file_name = #{record.fileName,jdbcType=VARCHAR},
      record_status = #{record.recordStatus,jdbcType=INTEGER},
      remarks = #{record.remarks,jdbcType=VARCHAR},
      version = #{record.version,jdbcType=INTEGER},
      date_created = #{record.dateCreated,jdbcType=TIMESTAMP},
      last_modified = #{record.lastModified,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.revengemission.commons.fss.persistence.entity.FileRecordEntity">
    update file_record_entity
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="shared != null">
        shared = #{shared,jdbcType=BIT},
      </if>
      <if test="fileName != null">
        file_name = #{fileName,jdbcType=VARCHAR},
      </if>
      <if test="recordStatus != null">
        record_status = #{recordStatus,jdbcType=INTEGER},
      </if>
      <if test="remarks != null">
        remarks = #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="dateCreated != null">
        date_created = #{dateCreated,jdbcType=TIMESTAMP},
      </if>
      <if test="lastModified != null">
        last_modified = #{lastModified,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.revengemission.commons.fss.persistence.entity.FileRecordEntity">
    update file_record_entity
    set user_id = #{userId,jdbcType=BIGINT},
      shared = #{shared,jdbcType=BIT},
      file_name = #{fileName,jdbcType=VARCHAR},
      record_status = #{recordStatus,jdbcType=INTEGER},
      remarks = #{remarks,jdbcType=VARCHAR},
      version = #{version,jdbcType=INTEGER},
      date_created = #{dateCreated,jdbcType=TIMESTAMP},
      last_modified = #{lastModified,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <cache flushInterval="5000" />
</mapper>